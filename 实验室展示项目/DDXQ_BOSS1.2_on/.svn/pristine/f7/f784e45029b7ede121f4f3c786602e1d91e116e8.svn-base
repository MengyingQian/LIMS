package com.ddxq.admin.fwt.fwzs.service;

import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.ddxq.admin.fwt.fwzs.dao.FwzsDao;
import com.ddxq.base.dao.hbase.BaseHBaseDAO;
import com.ddxq.common.cache.CacheUtil;

import net.sf.json.JSONObject;

@Service("fwzsService")
public class FwzsServiceImpl implements FwzsService{
	@Autowired
	FwzsDao fwzsDao;
	@Autowired
	private CacheUtil cacheUtil;
	@Autowired
	BaseHBaseDAO baseHBaseDAO;
	@Override
	public JSONObject getInfo(String districtId) {
		List<Map> list = fwzsDao.getListInfo(districtId);
		formDate(list);
		JSONObject json = new  JSONObject();
		json.put("total", list.size());
		json.put("rows", list);
		return json;
	}
	@Override
	public JSONObject getInfo(String districtId,String type ) {
		List<Map> list = fwzsDao.getListInfo(districtId,type);
		formDate(list);
		JSONObject json = new  JSONObject();
		json.put("total", list.size());
		json.put("rows", list);
		return json;
	}
	@Override
	public boolean insertInfo(JSONObject jobj) {
		Map map=new HashMap();
		String docid =cacheUtil.getRandomString();
		String rediskey="districtid:"+jobj.getString("districtId")+":house:"+jobj.getString("type");
		cacheUtil.zsetAdd(rediskey, docid, 0-Double.parseDouble(jobj.getString("sort")));
		map.put("buildingname", jobj.getString("buildingname"));
		map.put("title", jobj.getString("title"));
		map.put("districtname", jobj.getString("districtname"));
		map.put("buildingnum", jobj.getString("buildingnum"));
		map.put("house_floor", jobj.getString("house_floor"));
		map.put("house_type", jobj.getString("house_type"));
		map.put("type", jobj.getString("type"));
		map.put("house_orientation", jobj.getString("house_orientation"));
		map.put("house_num", jobj.getString("house_num"));
		map.put("house_area", jobj.getString("house_area"));
		map.put("house_age", jobj.getString("house_age"));
		map.put("house_decoration", jobj.getString("house_decoration"));
		map.put("house_advantages", jobj.getString("house_advantages"));
		map.put("price", jobj.getString("price"));
		map.put("phone", jobj.getString("phone"));
		map.put("status", jobj.getString("status"));
		map.put("sort", (0-Double.parseDouble(jobj.getString("sort")))+"");
		map.put("house_photo_0", jobj.getString("house_photo_0"));
		map.put("house_photo_1", jobj.getString("house_photo_1"));
		map.put("house_photo_2", jobj.getString("house_photo_2"));
		map.put("house_photo_3", jobj.getString("house_photo_3"));
		map.put("docid", docid);
		map.put("created", String.valueOf(new Date().getTime()) );
		map.put("expired", String.valueOf(new Date().getTime()) );
		map.put("updated",String.valueOf(new Date().getTime()) );
		cacheUtil.hashPut(docid, map);
		List <Map<String,String>>list=new ArrayList<>();
		list.add(map);
		try {
			baseHBaseDAO.addData(docid, "ddxq-house",list);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return true;
	}
	@Override
	public boolean updateInfo(String districtId,JSONObject jobj) {
		Map map=new HashMap();
		String rediskey="districtid:"+districtId+":house:"+jobj.getString("type");
		cacheUtil.zsetAdd(rediskey, jobj.getString("docid"), 0-Double.parseDouble(jobj.getString("sort")));
		map.put("buildingname", jobj.getString("buildingname"));
		map.put("districtname", jobj.getString("districtname"));
		map.put("title", jobj.getString("title"));
		map.put("buildingnum", jobj.getString("buildingnum"));
		map.put("house_floor", jobj.getString("house_floor"));
		map.put("house_type", jobj.getString("house_type"));	
		map.put("house_orientation", jobj.getString("house_orientation"));
		map.put("house_num", jobj.getString("house_num"));
		map.put("house_area", jobj.getString("house_area"));
		map.put("house_age", jobj.getString("house_age"));
		map.put("house_decoration", jobj.getString("house_decoration"));
		map.put("house_advantages", jobj.getString("house_advantages"));
		map.put("price", jobj.getString("price"));
		map.put("phone", jobj.getString("phone"));
		map.put("status", jobj.getString("status"));		
		map.put("updated",String.valueOf(new Date().getTime()));
		map.put("docid",jobj.getString("docid") );
		String type=jobj.getString("type");	
		cacheUtil.hashPut(jobj.getString("docid"), map);
		List <Map<String,String>>list=new ArrayList<>();
		list.add(map);
		try {
			baseHBaseDAO.addData(jobj.getString("docid"), "ddxq-house",list);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return true;
	}
	@Override
	public boolean removeInfo(String districtId,String type,String docid,JSONObject jobj) {
		String rediskey="districtid:"+districtId+":house:"+type;
		cacheUtil.zsetRemove(rediskey, docid);
		cacheUtil.hashRemove(docid);
		try {
			baseHBaseDAO.deleteAllColumn("ddxq-house",docid);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return true;
	}
	private void formDate(List<Map> list){
		for (int i = 0; i < list.size(); i++) {
			Map<String, Object> map=list.get(i);
			Date ts= new Date(Long.valueOf((String) map.get("created")));
			Date ts2=new Date(Long.valueOf((String) map.get("updated")));
			Date ts3=new Date(Long.valueOf((String) map.get("expired")));
			DateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"); 
			if(map.get("sort")==null){
				map.put("sort", "1");
			}
	        String date = sdf.format(ts);
	        String date2 = sdf.format(ts2); 
	        String date3 = sdf.format(ts3);
	        map.put("expired", date3);
	        map.put("created", date);
	        map.put("updated", date2);
		}
	}
}
